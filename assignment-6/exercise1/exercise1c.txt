I picked 192.168.84.77 as the victim and 192.168.84.17 as its gateway. I ran the arpspoof command in two different terminals, the first as ``` sudo arpspoof -i wlx00c0ca5a50a5 -t 192.168.84.77 192.168.84.17 ``` and the second as ``` sudo arpspoof -i wlx00c0ca5a50a5 -t 192.168.84.17 192.168.84.77 ```. As you can see in the attached exercise1c.pcapng file, arpspoofing on both sites was working fine. I captured the traffic way longer than the suggested 300 seconds and all I got were tcp connections between 192.168.84.77 (victim's ip) and 131.174.8.6 (http://www.ru.nl/icis/). I'm not sure if something vpn-related was happening here but that was the only ip address the victim was connecting to. I ran this experiment in my homenetwork and tried to capture the traffic between my android phone and the router which also happend to be the gateway. I tried to visit some tls/ssl secured pages with my android phone and captured the traffic by using wireshark. The traffic was marked as TLSv1.2 when I visited a page beginning with https. The ip header was not encrypted and I was able to read the ip addresses of the server my phone was trying to connect to. The contained data with the name of the websites was not visible to me due to the tls/ssl encryption. I guess that was the goal of this exercise if it would have worked properly. Seeing that the data is encrypted by tls/ssl, get the ip address of the server and see what sites the server is hosting and later on use ssltrip to get rid of the encryption and see that actual data.
