Let's look at an example using the drill command

	cs@cs-VirtualBox:~$ sudo drill -D -b 4096 ANY @89.163.210.121 blackboard.ru.nl
	;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 61957
	;; flags: qr rd ra ; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0 
	;; QUESTION SECTION:
	;; blackboard.ru.nl.	IN	TYPE255

	;; ANSWER SECTION:
	blackboard.ru.nl.	552	IN	A	131.174.57.69

	;; AUTHORITY SECTION:

	;; ADDITIONAL SECTION:

	;; Query time: 16 msec
	;; EDNS: version 0; flags: do ; udp: 4000
	;; SERVER: 89.163.210.121
	;; WHEN: Mon May 22 13:17:02 2017
	;; MSG SIZE  rcvd: 61

The recursive DNS server is located at 89.163.210.121. The answer is not authoritive, therefore the server is recursive and not responsible for the blackboard.ru.nl zone. The server therefore serves a cache. The answer section contains the url, the TTL (552) in seconds, the type and the actual ip of the target we requested. We therefore know that the record for blackboard.ru.nl only stays for 552 seconds in the cache and after that the server has to make a new request to update its cache. This update only occurs if someone requests the blackboard.ru.nl website, though. We could wait until the TTL expires, request the blackboard.ru.nl website so the server has to fire a DNS request for this url and then we could send our own forged DNS replies for this specific request. We would have to consider countermeasurements like QID-, source port- and 0x20 randomization which would result in many forged packets and a low chance of DNS cache poisoning. The bailiwick test is not important in this scenario because it just checks the additional section for urls which do not belong to the requested zone. Another approach would require that we are in the same subnet as the dns server and that we could manage to execute a MitM-attack. All the countermeasurements against DNS attacks would be obsolete in this scenario.
	* See also: http://sourcedaddy.com/networking/dns-cache-poisoning.html
	* http://www.unixwiz.net/techtips/iguide-kaminsky-dns-vuln.html
	* http://www.linuxjournal.com/content/understanding-kaminskys-dns-bug